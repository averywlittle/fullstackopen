{"ast":null,"code":"import blogService from '../services/blogs';\nimport loginService from '../services/login'; // Logic where we update state\n// Must be pure functions\n\nconst reducer = (state = [], action) => {\n  switch (action.type) {\n    case 'INIT_USER':\n      {\n        return action.data;\n      }\n\n    case 'LOGOUT_USER':\n      {\n        return null;\n      }\n\n    case 'LOGIN_USER':\n      {\n        return action.data;\n      }\n\n    case 'FAILED_USER':\n      {\n        console.log(action.data.message);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const initUser = () => {\n  return async dispatch => {\n    const loggedUserJSON = window.localStorage.getItem('loggedBlogappUser');\n\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      blogService.setToken(user.token);\n      dispatch({\n        type: 'INIT_USER',\n        data: user\n      });\n    }\n  };\n};\nexport const loginUser = ({\n  username,\n  password\n}) => {\n  return async dispatch => {\n    const user = await loginService.login({\n      username,\n      password\n    });\n\n    if (user.status === 401) {\n      dispatch({\n        type: 'FAILED_USER',\n        data: user\n      });\n    }\n\n    if (user.status === 200) {\n      window.localStorage.setItem('loggedBlogappUser', JSON.stringify(user));\n      blogService.setToken(user.token);\n      dispatch({\n        type: 'LOGIN_USER',\n        data: user\n      });\n    }\n  };\n};\nexport const logoutUser = () => {\n  window.localStorage.removeItem('loggedBlogappUser');\n  return async dispatch => {\n    dispatch({\n      type: 'LOGOUT_USER',\n      data: null\n    });\n  };\n};\nexport default reducer;","map":{"version":3,"sources":["/home/averywlittle/code/fullstackopen/part7/bloglist/client/src/reducers/userReducer.js"],"names":["blogService","loginService","reducer","state","action","type","data","console","log","message","initUser","dispatch","loggedUserJSON","window","localStorage","getItem","user","JSON","parse","setToken","token","loginUser","username","password","login","status","setItem","stringify","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,YAAP,MAAyB,mBAAzB,C,CAEA;AACA;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACpC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,WAAL;AAAkB;AACd,eAAOD,MAAM,CAACE,IAAd;AACH;;AACD,SAAK,aAAL;AAAoB;AAChB,eAAO,IAAP;AACH;;AACD,SAAK,YAAL;AAAmB;AACf,eAAOF,MAAM,CAACE,IAAd;AACH;;AACD,SAAK,aAAL;AAAoB;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACE,IAAP,CAAYG,OAAxB;AACH;;AACD;AAAS,aAAON,KAAP;AAbb;AAeH,CAhBD;;AAkBA,OAAO,MAAMO,QAAQ,GAAG,MAAM;AAE1B,SAAO,MAAMC,QAAN,IAAkB;AACrB,UAAMC,cAAc,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,mBAA5B,CAAvB;;AACA,QAAIH,cAAJ,EAAoB;AAChB,YAAMI,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWN,cAAX,CAAb;AACAZ,MAAAA,WAAW,CAACmB,QAAZ,CAAqBH,IAAI,CAACI,KAA1B;AACAT,MAAAA,QAAQ,CAAC;AACLN,QAAAA,IAAI,EAAE,WADD;AAELC,QAAAA,IAAI,EAAEU;AAFD,OAAD,CAAR;AAIH;AACJ,GAVD;AAWH,CAbM;AAeP,OAAO,MAAMK,SAAS,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAA0B;AAE/C,SAAO,MAAMZ,QAAN,IAAkB;AACrB,UAAMK,IAAI,GAAG,MAAMf,YAAY,CAACuB,KAAb,CAAmB;AAClCF,MAAAA,QADkC;AACxBC,MAAAA;AADwB,KAAnB,CAAnB;;AAGA,QAAIP,IAAI,CAACS,MAAL,KAAgB,GAApB,EAAyB;AACrBd,MAAAA,QAAQ,CAAC;AACLN,QAAAA,IAAI,EAAE,aADD;AAELC,QAAAA,IAAI,EAAEU;AAFD,OAAD,CAAR;AAIH;;AACD,QAAIA,IAAI,CAACS,MAAL,KAAgB,GAApB,EAAyB;AACrBZ,MAAAA,MAAM,CAACC,YAAP,CAAoBY,OAApB,CACI,mBADJ,EACyBT,IAAI,CAACU,SAAL,CAAeX,IAAf,CADzB;AAGAhB,MAAAA,WAAW,CAACmB,QAAZ,CAAqBH,IAAI,CAACI,KAA1B;AACAT,MAAAA,QAAQ,CAAC;AACLN,QAAAA,IAAI,EAAE,YADD;AAELC,QAAAA,IAAI,EAAEU;AAFD,OAAD,CAAR;AAIH;AACJ,GApBD;AAqBH,CAvBM;AAyBP,OAAO,MAAMY,UAAU,GAAG,MAAM;AAC5Bf,EAAAA,MAAM,CAACC,YAAP,CAAoBe,UAApB,CAA+B,mBAA/B;AAEA,SAAO,MAAMlB,QAAN,IAAkB;AACrBA,IAAAA,QAAQ,CAAC;AACLN,MAAAA,IAAI,EAAE,aADD;AAELC,MAAAA,IAAI,EAAE;AAFD,KAAD,CAAR;AAIH,GALD;AAMH,CATM;AAWP,eAAeJ,OAAf","sourcesContent":["import blogService from '../services/blogs'\nimport loginService from '../services/login'\n\n// Logic where we update state\n// Must be pure functions\nconst reducer = (state = [], action) => {\n    switch (action.type) {\n        case 'INIT_USER': {\n            return action.data\n        }\n        case 'LOGOUT_USER': {\n            return null\n        }\n        case 'LOGIN_USER': {\n            return action.data\n        }\n        case 'FAILED_USER': {\n            console.log(action.data.message)\n        }\n        default: return state\n    }\n}\n\nexport const initUser = () => {\n\n    return async dispatch => {\n        const loggedUserJSON = window.localStorage.getItem('loggedBlogappUser')\n        if (loggedUserJSON) {\n            const user = JSON.parse(loggedUserJSON)\n            blogService.setToken(user.token)\n            dispatch({\n                type: 'INIT_USER',\n                data: user\n            })\n        }\n    }\n}\n\nexport const loginUser = ({username, password}) => {\n\n    return async dispatch => {\n        const user = await loginService.login({\n            username, password\n        })\n        if (user.status === 401) {\n            dispatch({\n                type: 'FAILED_USER',\n                data: user\n            })\n        }\n        if (user.status === 200) {\n            window.localStorage.setItem(\n                'loggedBlogappUser', JSON.stringify(user)\n            )\n            blogService.setToken(user.token)\n            dispatch({\n                type: 'LOGIN_USER',\n                data: user\n            })\n        }\n    }\n}\n\nexport const logoutUser = () => {\n    window.localStorage.removeItem('loggedBlogappUser')\n\n    return async dispatch => {\n        dispatch({\n            type: 'LOGOUT_USER',\n            data: null\n        })\n    }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import blogService from '../services/blogs'; // Logic where we update state\n// Must be pure functions\n\nconst reducer = (state = [], action) => {\n  switch (action.type) {\n    case 'INIT_BLOG':\n      {\n        return action.data;\n      }\n\n    case 'ADD_BLOG':\n      {\n        return state.concat(action.data);\n      }\n\n    case 'LIKE_BLOG':\n      {\n        const id = action.data.id;\n        const changedBlog = action.data;\n        return state.map(blog => blog.id !== id ? blog : changedBlog);\n      }\n\n    case 'ADD_COMMENT':\n      {\n        console.log('comment action', action);\n        const blogId = action.data.blog;\n        const blogToUpdate = state.find(blog => blog.id === blogId);\n        blogToUpdate.comments.concat(action.data);\n        return state.map(blog => blog.id !== blogId ? blog : blogToUpdate);\n      }\n\n    case 'REMOVE_BLOG':\n      {\n        const id = action.data;\n        return state.filter(blog => blog.id !== id);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const likeBlog = blog => {\n  return async dispatch => {\n    const blogToUpdate = { ...blog,\n      likes: blog.likes + 1\n    };\n    const updatedBlog = await blogService.update(blogToUpdate, blog.id);\n    dispatch({\n      type: 'LIKE_BLOG',\n      data: updatedBlog\n    });\n  };\n};\nexport const addComment = ({\n  content,\n  blogId\n}) => {\n  return async dispatch => {\n    console.log('content', content);\n    const savedComment = await blogService.createComment(content, blogId);\n\n    if (savedComment) {\n      dispatch({\n        type: 'ADD_COMMENT',\n        data: savedComment\n      });\n    }\n  };\n};\nexport const addBlog = newBlog => {\n  return async dispatch => {\n    const savedBlog = await blogService.create(newBlog);\n\n    if (savedBlog) {\n      dispatch({\n        type: 'ADD_BLOG',\n        data: savedBlog\n      });\n    }\n  };\n};\nexport const removeBlog = id => {\n  return async dispatch => {\n    const removeStatus = await blogService.remove(id);\n\n    if (removeStatus === 204) {\n      dispatch({\n        type: 'REMOVE_BLOG',\n        data: id\n      });\n    } else {\n      dispatch({\n        type: 'FAILED_BLOG',\n        data: id\n      });\n    }\n  };\n};\nexport const initBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    dispatch({\n      type: 'INIT_BLOG',\n      data: blogs\n    });\n  };\n};\nexport default reducer;","map":{"version":3,"sources":["/home/averywlittle/code/fullstackopen/part7/bloglist/client/src/reducers/blogReducer.js"],"names":["blogService","reducer","state","action","type","data","concat","id","changedBlog","map","blog","console","log","blogId","blogToUpdate","find","comments","filter","likeBlog","dispatch","likes","updatedBlog","update","addComment","content","savedComment","createComment","addBlog","newBlog","savedBlog","create","removeBlog","removeStatus","remove","initBlogs","blogs","getAll"],"mappings":"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","sourcesContent":["import blogService from '../services/blogs'\n\n// Logic where we update state\n// Must be pure functions\nconst reducer = (state = [], action) => {\n    switch (action.type) {\n        case 'INIT_BLOG': {\n            return action.data\n        }\n        case 'ADD_BLOG': {\n            return state.concat(action.data)\n        }\n        case 'LIKE_BLOG': {\n            const id = action.data.id\n            const changedBlog = action.data\n            return state.map(blog => \n                blog.id !== id ? blog : changedBlog\n            )\n        }\n        case 'ADD_COMMENT': {\n            console.log('comment action', action)\n            const blogId = action.data.blog\n            const blogToUpdate = state.find(blog => blog.id === blogId)\n            blogToUpdate.comments.concat(action.data)\n            \n            return state.map(blog => \n                blog.id !== blogId ? blog : blogToUpdate\n            )\n        }\n        case 'REMOVE_BLOG': {\n            const id = action.data\n            return state.filter(blog => blog.id !== id)\n        }\n        default: return state\n    }\n}\n\nexport const likeBlog = (blog) => {\n\n    return async dispatch => {\n        const blogToUpdate = {\n            ...blog,\n            likes: blog.likes + 1\n        }\n        const updatedBlog = await blogService.update(blogToUpdate, blog.id)\n        dispatch({\n            type: 'LIKE_BLOG',\n            data: updatedBlog\n        })\n    }\n}\n\nexport const addComment = ({ content, blogId }) => {\n\n    return async dispatch => {\n        console.log('content', content)\n        const savedComment = await blogService.createComment(content, blogId)\n        if (savedComment) {\n            dispatch({\n                type: 'ADD_COMMENT',\n                data: savedComment\n            })\n        }\n    }\n}\n\nexport const addBlog = (newBlog) => {\n    \n    return async dispatch => {\n        const savedBlog = await blogService.create(newBlog)\n        if (savedBlog) {\n            dispatch({\n                type: 'ADD_BLOG',\n                data: savedBlog\n            })\n        }\n    }\n}\n\nexport const removeBlog = (id) => {\n\n    return async dispatch => {\n        const removeStatus = await blogService.remove(id)\n        if (removeStatus === 204) {\n            dispatch({\n                type: 'REMOVE_BLOG',\n                data: id\n            })\n        } else {\n            dispatch({\n                type: 'FAILED_BLOG',\n                data: id\n            })\n        }\n    }\n}\n\nexport const initBlogs = () => {\n\n    return async dispatch => {\n        const blogs = await blogService.getAll()\n        dispatch({\n            type: 'INIT_BLOG',\n            data: blogs\n        })\n    }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import blogService from '../services/blogs';\nconst loggedUserJSON = window.localStorage.getItem('loggedBlogappUser');\n\nif (loggedUserJSON) {\n  const user = JSON.parse(loggedUserJSON);\n  setUser(user);\n  blogService.setToken(user.token);\n} // Logic where we update state\n// Must be pure functions\n\n\nconst reducer = (state = [], action) => {\n  switch (action.type) {\n    case 'INIT':\n      {\n        return action.data;\n      }\n\n    case 'ADD':\n      {\n        return state.concat(action.data);\n      }\n\n    case 'LIKE':\n      {\n        const id = action.data.id;\n        const changedBlog = action.data;\n        return state.map(blog => blog.id !== id ? blog : changedBlog);\n      }\n\n    case 'REMOVE':\n      {\n        const id = action.data;\n        return state.filter(blog => blog.id !== id);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const likeBlog = blog => {\n  return async dispatch => {\n    const blogToUpdate = { ...blog,\n      likes: blog.likes + 1\n    };\n    const updatedBlog = await blogService.update(blogToUpdate, blog.id);\n    dispatch({\n      type: 'LIKE',\n      data: updatedBlog\n    });\n  };\n};\nexport const addBlog = newBlog => {\n  return async dispatch => {\n    const savedBlog = await blogService.create(newBlog);\n\n    if (savedBlog) {\n      dispatch({\n        type: 'ADD',\n        data: savedBlog\n      });\n    }\n  };\n};\nexport const removeBlog = id => {\n  return async dispatch => {\n    const removeStatus = await blogService.remove(id);\n\n    if (removeStatus === 204) {\n      dispatch({\n        type: 'REMOVE',\n        data: id\n      });\n    } else {\n      dispatch({\n        type: 'FAILED',\n        data: id\n      });\n    }\n  };\n};\nexport const initBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    dispatch({\n      type: 'INIT',\n      data: blogs\n    });\n  };\n};\nexport default reducer;","map":{"version":3,"sources":["/home/averywlittle/code/fullstackopen/part7/bloglist/client/src/reducers/userReducer.js"],"names":["blogService","loggedUserJSON","window","localStorage","getItem","user","JSON","parse","setUser","setToken","token","reducer","state","action","type","data","concat","id","changedBlog","map","blog","filter","likeBlog","dispatch","blogToUpdate","likes","updatedBlog","update","addBlog","newBlog","savedBlog","create","removeBlog","removeStatus","remove","initBlogs","blogs","getAll"],"mappings":"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","sourcesContent":["\nimport blogService from '../services/blogs'\nconst loggedUserJSON = window.localStorage.getItem('loggedBlogappUser')\nif (loggedUserJSON) {\n    const user = JSON.parse(loggedUserJSON)\n    setUser(user)\n    blogService.setToken(user.token)\n}\n\n\n// Logic where we update state\n// Must be pure functions\nconst reducer = (state = [], action) => {\n    switch (action.type) {\n        case 'INIT': {\n            return action.data\n        }\n        case 'ADD': {\n            return state.concat(action.data)\n        }\n        case 'LIKE': {\n            const id = action.data.id\n            const changedBlog = action.data\n            return state.map(blog =>\n                blog.id !== id ? blog : changedBlog\n            )\n        }\n        case 'REMOVE': {\n            const id = action.data\n            return state.filter(blog => blog.id !== id)\n        }\n        default: return state\n    }\n}\n\nexport const likeBlog = (blog) => {\n\n    return async dispatch => {\n        const blogToUpdate = {\n            ...blog,\n            likes: blog.likes + 1\n        }\n        const updatedBlog = await blogService.update(blogToUpdate, blog.id)\n        dispatch({\n            type: 'LIKE',\n            data: updatedBlog\n        })\n    }\n}\n\nexport const addBlog = (newBlog) => {\n\n    return async dispatch => {\n        const savedBlog = await blogService.create(newBlog)\n        if (savedBlog) {\n            dispatch({\n                type: 'ADD',\n                data: savedBlog\n            })\n        }\n    }\n}\n\nexport const removeBlog = (id) => {\n\n    return async dispatch => {\n        const removeStatus = await blogService.remove(id)\n        if (removeStatus === 204) {\n            dispatch({\n                type: 'REMOVE',\n                data: id\n            })\n        } else {\n            dispatch({\n                type: 'FAILED',\n                data: id\n            })\n        }\n    }\n}\n\nexport const initBlogs = () => {\n\n    return async dispatch => {\n        const blogs = await blogService.getAll()\n        dispatch({\n            type: 'INIT',\n            data: blogs\n        })\n    }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}
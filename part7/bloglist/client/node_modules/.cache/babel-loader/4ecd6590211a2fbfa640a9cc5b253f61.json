{"ast":null,"code":"import blogService from '../services/blogs'; // Logic where we update state\n// Must be pure functions\n\nconst reducer = (state = [], action) => {\n  switch (action.type) {\n    case 'INIT':\n      {\n        return action.data;\n      }\n\n    case 'ADD':\n      {\n        return state.concat(action.data);\n      }\n\n    case 'LIKE':\n      {}\n\n    case 'REMOVE':\n      {\n        const id = action.data;\n        return state.filter(blog => blog.id !== id);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const likeBlog = blog => {\n  return async dispatch => {\n    const blogToUpdate = { ...blog,\n      likes: blog.likes + 1\n    };\n    const updatedBlog = await blogService.update(blogToUpdate, blog.id);\n    dispatch({\n      type: 'LIKE',\n      data: updatedBlog\n    });\n  };\n};\nexport const addBlog = blog => {\n  console.log('TODO');\n}; // try {\n//   const newBlog = {\n//     user: blog.user,\n//     title: blog.title,\n//     author: blog.author,\n//     url: blog.url,\n//     likes: blog.likes + 1\n//   }\n//   const savedBlog = await blogService.update(newBlog, blog.id)\n//   if (savedBlog) {\n//     console.log('blog like', savedBlog)\n//     let newBlogList = [...blogs]\n//     const index = newBlogList.findIndex((blog) => { return blog.id === savedBlog.id ? true : false })\n//     if (index !== -1) {\n//       newBlogList[index] = savedBlog\n//       setBlogs(newBlogList)\n//     }\n//   }\n// } catch (exception) {\n//   console.error('like blog exception', exception)\n// }\n\nexport const removeBlog = id => {\n  return async dispatch => {\n    const removeStatus = await blogService.remove(id);\n\n    if (removeStatus === 204) {\n      dispatch({\n        type: 'REMOVE',\n        data: id\n      });\n    } else {\n      dispatch({\n        type: 'FAILED',\n        data: id\n      });\n    }\n  };\n};\nexport const initBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    dispatch({\n      type: 'INIT',\n      data: blogs\n    });\n  };\n};\nexport default reducer;","map":{"version":3,"sources":["/home/averywlittle/code/fullstackopen/part7/bloglist/client/src/reducers/blogReducer.js"],"names":["blogService","reducer","state","action","type","data","concat","id","filter","blog","likeBlog","dispatch","blogToUpdate","likes","updatedBlog","update","addBlog","console","log","removeBlog","removeStatus","remove","initBlogs","blogs","getAll"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB,C,CAEA;AACA;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACpC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,MAAL;AAAa;AACT,eAAOD,MAAM,CAACE,IAAd;AACH;;AACD,SAAK,KAAL;AAAY;AACR,eAAOH,KAAK,CAACI,MAAN,CAAaH,MAAM,CAACE,IAApB,CAAP;AACH;;AACD,SAAK,MAAL;AAAa,OAEZ;;AACD,SAAK,QAAL;AAAe;AACX,cAAME,EAAE,GAAGJ,MAAM,CAACE,IAAlB;AACA,eAAOH,KAAK,CAACM,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACF,EAAL,KAAYA,EAAjC,CAAP;AACH;;AACD;AAAS,aAAOL,KAAP;AAdb;AAgBH,CAjBD;;AAmBA,OAAO,MAAMQ,QAAQ,GAAID,IAAD,IAAU;AAC9B,SAAO,MAAME,QAAN,IAAkB;AACrB,UAAMC,YAAY,GAAG,EACjB,GAAGH,IADc;AAEjBI,MAAAA,KAAK,EAAEJ,IAAI,CAACI,KAAL,GAAa;AAFH,KAArB;AAIA,UAAMC,WAAW,GAAG,MAAMd,WAAW,CAACe,MAAZ,CAAmBH,YAAnB,EAAiCH,IAAI,CAACF,EAAtC,CAA1B;AACAI,IAAAA,QAAQ,CAAC;AACLP,MAAAA,IAAI,EAAE,MADD;AAELC,MAAAA,IAAI,EAAES;AAFD,KAAD,CAAR;AAIH,GAVD;AAWH,CAZM;AAcP,OAAO,MAAME,OAAO,GAAIP,IAAD,IAAU;AAC7BQ,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,CAFM,C,CAKC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAER,OAAO,MAAMC,UAAU,GAAIZ,EAAD,IAAQ;AAE9B,SAAO,MAAMI,QAAN,IAAkB;AACrB,UAAMS,YAAY,GAAG,MAAMpB,WAAW,CAACqB,MAAZ,CAAmBd,EAAnB,CAA3B;;AACA,QAAIa,YAAY,KAAK,GAArB,EAA0B;AACtBT,MAAAA,QAAQ,CAAC;AACLP,QAAAA,IAAI,EAAE,QADD;AAELC,QAAAA,IAAI,EAAEE;AAFD,OAAD,CAAR;AAIH,KALD,MAKO;AACHI,MAAAA,QAAQ,CAAC;AACLP,QAAAA,IAAI,EAAE,QADD;AAELC,QAAAA,IAAI,EAAEE;AAFD,OAAD,CAAR;AAIH;AACJ,GAbD;AAcH,CAhBM;AAkBP,OAAO,MAAMe,SAAS,GAAG,MAAM;AAE3B,SAAO,MAAMX,QAAN,IAAkB;AACrB,UAAMY,KAAK,GAAG,MAAMvB,WAAW,CAACwB,MAAZ,EAApB;AACAb,IAAAA,QAAQ,CAAC;AACLP,MAAAA,IAAI,EAAE,MADD;AAELC,MAAAA,IAAI,EAAEkB;AAFD,KAAD,CAAR;AAIH,GAND;AAOH,CATM;AAWP,eAAetB,OAAf","sourcesContent":["import blogService from '../services/blogs'\n\n// Logic where we update state\n// Must be pure functions\nconst reducer = (state = [], action) => {\n    switch (action.type) {\n        case 'INIT': {\n            return action.data\n        }\n        case 'ADD': {\n            return state.concat(action.data)\n        }\n        case 'LIKE': {\n\n        }\n        case 'REMOVE': {\n            const id = action.data\n            return state.filter(blog => blog.id !== id)\n        }\n        default: return state\n    }\n}\n\nexport const likeBlog = (blog) => {\n    return async dispatch => {\n        const blogToUpdate = {\n            ...blog,\n            likes: blog.likes + 1\n        }\n        const updatedBlog = await blogService.update(blogToUpdate, blog.id)\n        dispatch({\n            type: 'LIKE',\n            data: updatedBlog\n        })\n    }\n}\n\nexport const addBlog = (blog) => {\n    console.log('TODO')\n}\n\n\n        // try {\n        //   const newBlog = {\n        //     user: blog.user,\n        //     title: blog.title,\n        //     author: blog.author,\n        //     url: blog.url,\n        //     likes: blog.likes + 1\n        //   }\n    \n        //   const savedBlog = await blogService.update(newBlog, blog.id)\n        //   if (savedBlog) {\n        //     console.log('blog like', savedBlog)\n        //     let newBlogList = [...blogs]\n        //     const index = newBlogList.findIndex((blog) => { return blog.id === savedBlog.id ? true : false })\n    \n        //     if (index !== -1) {\n        //       newBlogList[index] = savedBlog\n        //       setBlogs(newBlogList)\n        //     }\n        //   }\n    \n        // } catch (exception) {\n        //   console.error('like blog exception', exception)\n        // }\n\nexport const removeBlog = (id) => {\n\n    return async dispatch => {\n        const removeStatus = await blogService.remove(id)\n        if (removeStatus === 204) {\n            dispatch({\n                type: 'REMOVE',\n                data: id\n            })\n        } else {\n            dispatch({\n                type: 'FAILED',\n                data: id\n            })\n        }\n    }\n}\n\nexport const initBlogs = () => {\n\n    return async dispatch => {\n        const blogs = await blogService.getAll()\n        dispatch({\n            type: 'INIT',\n            data: blogs\n        })\n    }\n}\n\nexport default reducer"]},"metadata":{},"sourceType":"module"}